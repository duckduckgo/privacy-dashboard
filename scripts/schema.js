import { writeFileSync, readFileSync } from 'node:fs';
import { join } from 'path';
import { generate } from 'ts-to-zod';
import { compile } from 'json-schema-to-typescript';

// @ts-ignore
const CWD = new URL('..', import.meta.url).pathname;
const BASE = join(CWD, 'schema');
const SCHEMA_TYPES = join(BASE, '__generated__', 'schema.types.ts');
const SCHEMA_PARSERS = join(BASE, '__generated__', 'schema.parsers.mjs');
const schema = JSON.parse(readFileSync(join(BASE, 'api.json'), 'utf8'));

const bannerComment = `/**
 * This was auto-generated by the 'npm run schema' command.
 * It uses JSON schema files located in the 'schema' folder
 *
 * The 'Interfaces' listed below can be used to document API boundaries where JSON is sent/received to the various
 * platforms. They all have a corresponding Zod parser that can be used in runtime code to verify incoming/outgoing data.
 *
 * For example, {@link RequestData} is used by all platforms to describe the minimum amount of data required
 * by the Privacy Dashboard - it's parser can be imported from 'schema/__generated__/schema.parsers.js' and used
 * to validate incoming Tracker data.
 * 
 * @module Generated Schema Definitions
 */
`;

create(schema)
    .then((items) => writeItem(SCHEMA_TYPES, items, bannerComment))
    .then((tsContent) => createValidatorsOutput(tsContent))
    .then((parserContent) =>
        writeItem(SCHEMA_PARSERS, {
            name: 'schema.parsers.mjs',
            content: parserContent,
        })
    )
    .catch((e) => console.error(e));

async function create(schema) {
    const typescriptSourceCode = await compile(schema, schema.title, {
        additionalProperties: false,
        cwd: BASE,
    });
    return {
        content: typescriptSourceCode,
        name: schema.title,
    };
}

/**
 * Write the Zod parsers to disk
 * @param {string} outputFile
 * @param {{content: string, name: string}} item
 * @param {string} [banner]
 * @returns {string}
 */
function writeItem(outputFile, item, banner = '') {
    let output = banner;
    output += item.content + '\n';
    console.log('âœ…', item.name);
    writeFileSync(outputFile, output);
    return output;
}

/**
 * Convert the Typescript definitions into Zod definitions
 * to be used as validators.
 *
 * @param {string} typescriptDefinitions
 * @returns {string}
 */
function createValidatorsOutput(typescriptDefinitions) {
    const zodResult = generate({
        sourceText: typescriptDefinitions,
    });
    return zodResult.getZodSchemasFile('');
}
